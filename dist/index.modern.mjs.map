{"version":3,"file":"index.modern.mjs","sources":["../src/context.tsx","../src/modal-port.tsx"],"sourcesContent":["import { \n  createContext, \n  useContext, \n  useState, \n  type SyntheticEvent \n} from 'react';\nimport { \n  type ModalStackItem,\n  type ModalContextProperties,\n  type LaunchModal,\n  type LaunchModalResolvers,\n  type ModalState,\n  type UpdateModalState,\n} from '../types';\n\nexport const ModalContext = createContext<ModalContextProperties>({\n  stack: [],\n  launchModal: () => {},\n  updateStack: () => {},\n  updateState: () => {},\n});\n\nexport const ModalContextProvider = ({ children }: Readonly<{ children: React.ReactNode }>) => {\n\n  const [ stack, updateStack ] = useState<ModalStackItem[]>([]);\n\n  const launchModal: LaunchModal = (render, resolvers, onBackdropClickUse) => {\n    // Wrap resolvers to update the stack\n    const wrappedResovers = Object.keys(resolvers).reduce((acc, key) => {\n      const resolver = resolvers[key];\n      acc[key] = async (ev?: SyntheticEvent) => {\n        const result = await resolver(ev);\n        updateStack(stack.slice(0, -1));\n        return result;\n      };\n      return acc;\n    }, {} as LaunchModalResolvers);\n    updateStack([\n      ...stack,\n      {\n        render,\n        resolvers: wrappedResovers,\n        onBackdropClickUse,\n        state: {},\n      },\n    ]);\n  };\n\n  const updateState = (newState: ModalState) => {\n    const updatedStack = [\n      ...stack,\n    ];\n    updatedStack[stack.length - 1].state = { ...newState };\n    updateStack(updatedStack);\n  };\n\n  const contextProperties: ModalContextProperties = {\n    stack,\n    launchModal,\n    updateStack,\n    updateState,\n  };\n\n  return <ModalContext.Provider value={contextProperties}>{children}</ModalContext.Provider>;\n\n};\n\n/**\n * Get properties from the modal context\n * @returns {ModalContextProperties} Object with the modal context properties\n */\nexport function useModalContext(): ModalContextProperties {\n  return useContext(ModalContext);\n}\n\n/**\n * Short-hand for `useModalContext().launchModal`\n * @returns {LaunchModal} The launchModal function\n */\nexport function useModal(): LaunchModal {\n  const { launchModal } = useModalContext();\n  return launchModal;\n}\n\n/**\n * Get access to the current modal state and a function to update it\n * @returns {[ ModalState, UpdateModalState ]} A tuple with the current modal state and a function to update it\n */\nexport function useModalState(): [ ModalState, UpdateModalState ] {\n  const { stack, updateState } = useModalContext();\n  if (stack.length === 0) \n    throw new Error('Trying to access modal state while no modal is open');\n  const state = stack[stack.length - 1].state;\n  return [ state, updateState ];\n}\n","import { \n  type ModalPortProps, \n  type ModalStackItem \n} from \"../types\";\nimport { useModalContext } from \"./context\";\nimport { \n  type SyntheticEvent, \n  useCallback, \n  useEffect, \n  useMemo\n} from \"react\";\n\nconst ModalPort: React.FC<ModalPortProps> = ({\n  onModalLaunch,\n  onModalClose,\n  render: Backdrop\n}) => {\n\n  const { stack } = useModalContext();\n  const currentModal: ModalStackItem | null = useMemo(\n    () => stack.length > 0 ? stack[stack.length - 1] : null,\n    [ stack ]\n  );\n  const onBackdropClick = useCallback((ev: SyntheticEvent) => {\n    if (ev.currentTarget !== ev.target) return;\n    currentModal?.onBackdropClickUse &&\n    currentModal.resolvers[currentModal.onBackdropClickUse](ev);\n  }, [ currentModal ]);\n\n  useEffect(() => {\n    if (currentModal) {\n      onModalLaunch && onModalLaunch();\n    } else {\n      onModalClose && onModalClose();\n    }\n  }, [ currentModal, onModalLaunch, onModalClose ]);\n\n  return currentModal && (\n    <Backdrop onBackdropClick={onBackdropClick}>\n      {currentModal.render(currentModal.resolvers)}\n    </Backdrop>\n  ) || null;\n};\n\nexport default ModalPort;\n"],"names":["ModalContext","createContext","stack","launchModal","updateStack","updateState","ModalContextProvider","children","useState","_jsx","Provider","value","render","resolvers","onBackdropClickUse","wrappedResovers","Object","keys","reduce","acc","key","resolver","async","result","ev","slice","state","newState","updatedStack","length","_extends","useModalContext","useContext","useModal","useModalState","Error","ModalPort","onModalLaunch","onModalClose","Backdrop","currentModal","useMemo","onBackdropClick","useCallback","currentTarget","target","useEffect"],"mappings":"6XAea,MAAAA,EAAeC,EAAsC,CAChEC,MAAO,GACPC,YAAaA,OACbC,YAAaA,OACbC,YAAaA,SAGFC,EAAuBA,EAAGC,eAErC,MAAQL,EAAOE,GAAgBI,EAA2B,IAuC1D,OAAOC,EAACT,EAAaU,SAAQ,CAACC,MAPoB,CAChDT,QACAC,YAhC+BA,CAACS,EAAQC,EAAWC,KAEnD,MAAMC,EAAkBC,OAAOC,KAAKJ,GAAWK,OAAO,CAACC,EAAKC,KAC1D,MAAMC,EAAWR,EAAUO,GAM3B,OALAD,EAAIC,GAAOE,UACT,MAAMC,QAAeF,EAASG,GAE9B,OADApB,EAAYF,EAAMuB,MAAM,GAAI,IACrBF,GAEFJ,GACN,IACHf,EAAY,IACPF,EACH,CACEU,SACAC,UAAWE,EACXD,qBACAY,MAAO,CACR,IACF,EAcDtB,cACAC,YAZmBsB,IACnB,MAAMC,EAAe,IAChB1B,GAEL0B,EAAa1B,EAAM2B,OAAS,GAAGH,MAAKI,EAAA,CAAA,EAAQH,GAC5CvB,EAAYwB,EAAY,GAU4BrB,SAAGA,GAAQ,EAQnD,SAAAwB,IACd,OAAOC,EAAWhC,EACpB,CAMgB,SAAAiC,IACd,MAAM9B,YAAEA,GAAgB4B,IACxB,OAAO5B,CACT,UAMgB+B,IACd,MAAMhC,MAAEA,EAAKG,YAAEA,GAAgB0B,IAC/B,GAAqB,IAAjB7B,EAAM2B,OACR,MAAM,IAAIM,MAAM,uDAElB,MAAO,CADOjC,EAAMA,EAAM2B,OAAS,GAAGH,MACtBrB,EAClB,CClFM,MAAA+B,EAAsCA,EAC1CC,gBACAC,eACA1B,OAAQ2B,MAGR,MAAMrC,MAAEA,GAAU6B,IACZS,EAAsCC,EAC1C,IAAMvC,EAAM2B,OAAS,EAAI3B,EAAMA,EAAM2B,OAAS,GAAK,KACnD,CAAE3B,IAEEwC,EAAkBC,EAAanB,IAC/BA,EAAGoB,gBAAkBpB,EAAGqB,eAC5BL,SAAAA,EAAc1B,qBACd0B,EAAa3B,UAAU2B,EAAa1B,oBAAoBU,EAAE,EACzD,CAAEgB,IAUL,OARAM,EAAU,KACJN,EACFH,GAAiBA,IAEjBC,GAAgBA,GAClB,EACC,CAAEE,EAAcH,EAAeC,IAE3BE,GACL/B,EAAC8B,EAAS,CAAAG,gBAAiBA,EACxBnC,SAAAiC,EAAa5B,OAAO4B,EAAa3B,cAEjC"}